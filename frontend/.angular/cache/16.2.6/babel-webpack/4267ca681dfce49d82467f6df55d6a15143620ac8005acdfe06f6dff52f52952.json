{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class UserService {\n  constructor(http) {\n    this.http = http;\n  }\n  login(username, password) {\n    const data = {\n      username: username,\n      password: password\n    };\n    return this.http.post(\"/api/users/login\", data);\n  }\n  register(data) {\n    return this.http.post(\"/api/users/register\", data);\n  }\n  getLoginRequests() {\n    return this.http.get(\"/api/users/login-requests\");\n  }\n  approveRequest(id) {\n    return this.http.put(`/api/users/approve-login-request/${id}`, null);\n  }\n  rejectRequest(id) {\n    return this.http.delete(`/api/users/reject-login-request/${id}`);\n  }\n  changePasswordWithOldPassword(oldPassword, newPassword, username) {\n    return this.http.post(`/api/users/with-old-password`, {\n      oldPassword,\n      newPassword,\n      username\n    }, {\n      responseType: 'text'\n    });\n  }\n  getSecurityQuestion(username) {\n    return this.http.get(`/api/users/security-question/${username}`, {\n      responseType: 'text'\n    });\n  }\n  verifySecurityAnswer(username, securityAnswer) {\n    return this.http.post(`/api/users/verify-security-answer`, {\n      username,\n      securityAnswer\n    }, {\n      responseType: 'text'\n    });\n  }\n  changePasswordWithSecurityAnswer(username, newPassword) {\n    return this.http.post(`/api/users/with-security-answer`, {\n      username,\n      newPassword\n    }, {\n      responseType: 'text'\n    });\n  }\n  getExsistingUsers(role) {\n    return this.http.get(`/api/users/existing-users/${role}`);\n  }\n  blockUser(id) {\n    return this.http.put(`/api/users/block-user/${id}`, null, {\n      responseType: 'text'\n    });\n  }\n  static #_ = this.ɵfac = function UserService_Factory(t) {\n    return new (t || UserService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserService,\n    factory: UserService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["UserService","constructor","http","login","username","password","data","post","register","getLoginRequests","get","approveRequest","id","put","rejectRequest","delete","changePasswordWithOldPassword","oldPassword","newPassword","responseType","getSecurityQuestion","verifySecurityAnswer","securityAnswer","changePasswordWithSecurityAnswer","getExsistingUsers","role","blockUser","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\petri\\OneDrive\\Desktop\\pia projekat\\frontend\\src\\app\\service\\user.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { User } from '../entities/User';\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n  constructor(private http: HttpClient) { }\n\n  login(username: string, password: string){\n    const data={\n      username: username,\n      password: password\n    }\n    return this.http.post<User>(\"/api/users/login\", data)\n  }\n\n  register(data:any){\n    return this.http.post<User>(\"/api/users/register\", data)\n  }\n\n  getLoginRequests(){\n    return this.http.get<Array<User>>(\"/api/users/login-requests\")\n  }\n\n  approveRequest(id: Number){\n    return this.http.put<User>(`/api/users/approve-login-request/${id}`,null)\n  }\n\n  rejectRequest(id: Number){\n    return this.http.delete<User>(`/api/users/reject-login-request/${id}`)\n  }\n\n\n  changePasswordWithOldPassword(oldPassword: string, newPassword: string,username: string)  {\n    return this.http.post<String>(`/api/users/with-old-password`, { oldPassword, newPassword, username},{responseType: 'text' as 'json'});\n  }\n\n  getSecurityQuestion(username: string) {\n    return this.http.get<String>(`/api/users/security-question/${username}`,{responseType: 'text' as 'json'});\n  }\n\n  verifySecurityAnswer(username: string, securityAnswer: string) {\n    return this.http.post<String>(`/api/users/verify-security-answer`, { username, securityAnswer },{responseType: 'text' as 'json'});\n  }\n\n  changePasswordWithSecurityAnswer(username: string, newPassword: string) {\n    return this.http.post<String>(`/api/users/with-security-answer`, { username, newPassword },{responseType: 'text' as 'json'});\n  }\n\n  getExsistingUsers(role: String){\n    return this.http.get<Array<User>>(`/api/users/existing-users/${role}`)\n  }\n\n  blockUser(id: Number){\n    return this.http.put<String>(`/api/users/block-user/${id}`,null ,{responseType: 'text' as 'json'})\n  }\n}\n"],"mappings":";;AAMA,OAAM,MAAOA,WAAW;EACtBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;EAAgB;EAExCC,KAAKA,CAACC,QAAgB,EAAEC,QAAgB;IACtC,MAAMC,IAAI,GAAC;MACTF,QAAQ,EAAEA,QAAQ;MAClBC,QAAQ,EAAEA;KACX;IACD,OAAO,IAAI,CAACH,IAAI,CAACK,IAAI,CAAO,kBAAkB,EAAED,IAAI,CAAC;EACvD;EAEAE,QAAQA,CAACF,IAAQ;IACf,OAAO,IAAI,CAACJ,IAAI,CAACK,IAAI,CAAO,qBAAqB,EAAED,IAAI,CAAC;EAC1D;EAEAG,gBAAgBA,CAAA;IACd,OAAO,IAAI,CAACP,IAAI,CAACQ,GAAG,CAAc,2BAA2B,CAAC;EAChE;EAEAC,cAAcA,CAACC,EAAU;IACvB,OAAO,IAAI,CAACV,IAAI,CAACW,GAAG,CAAO,oCAAoCD,EAAE,EAAE,EAAC,IAAI,CAAC;EAC3E;EAEAE,aAAaA,CAACF,EAAU;IACtB,OAAO,IAAI,CAACV,IAAI,CAACa,MAAM,CAAO,mCAAmCH,EAAE,EAAE,CAAC;EACxE;EAGAI,6BAA6BA,CAACC,WAAmB,EAAEC,WAAmB,EAACd,QAAgB;IACrF,OAAO,IAAI,CAACF,IAAI,CAACK,IAAI,CAAS,8BAA8B,EAAE;MAAEU,WAAW;MAAEC,WAAW;MAAEd;IAAQ,CAAC,EAAC;MAACe,YAAY,EAAE;IAAgB,CAAC,CAAC;EACvI;EAEAC,mBAAmBA,CAAChB,QAAgB;IAClC,OAAO,IAAI,CAACF,IAAI,CAACQ,GAAG,CAAS,gCAAgCN,QAAQ,EAAE,EAAC;MAACe,YAAY,EAAE;IAAgB,CAAC,CAAC;EAC3G;EAEAE,oBAAoBA,CAACjB,QAAgB,EAAEkB,cAAsB;IAC3D,OAAO,IAAI,CAACpB,IAAI,CAACK,IAAI,CAAS,mCAAmC,EAAE;MAAEH,QAAQ;MAAEkB;IAAc,CAAE,EAAC;MAACH,YAAY,EAAE;IAAgB,CAAC,CAAC;EACnI;EAEAI,gCAAgCA,CAACnB,QAAgB,EAAEc,WAAmB;IACpE,OAAO,IAAI,CAAChB,IAAI,CAACK,IAAI,CAAS,iCAAiC,EAAE;MAAEH,QAAQ;MAAEc;IAAW,CAAE,EAAC;MAACC,YAAY,EAAE;IAAgB,CAAC,CAAC;EAC9H;EAEAK,iBAAiBA,CAACC,IAAY;IAC5B,OAAO,IAAI,CAACvB,IAAI,CAACQ,GAAG,CAAc,6BAA6Be,IAAI,EAAE,CAAC;EACxE;EAEAC,SAASA,CAACd,EAAU;IAClB,OAAO,IAAI,CAACV,IAAI,CAACW,GAAG,CAAS,yBAAyBD,EAAE,EAAE,EAAC,IAAI,EAAE;MAACO,YAAY,EAAE;IAAgB,CAAC,CAAC;EACpG;EAAC,QAAAQ,CAAA,G;qBAlDU3B,WAAW,EAAA4B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAXhC,WAAW;IAAAiC,OAAA,EAAXjC,WAAW,CAAAkC,IAAA;IAAAC,UAAA,EAFV;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}